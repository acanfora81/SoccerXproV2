generator client {
  provider = "prisma-client-js"
  output   = "./generated/client"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Team {
  id                      String                      @id @default(uuid()) @db.Uuid
  name                    String
  slug                    String                      @unique
  plan                    String                      @default("basic")
  isActive                Boolean                     @default(true)
  maxPlayers              Int                         @default(25)
  maxUsers                Int                         @default(5)
  email                   String?
  phone                   String?
  address                 String?
  vatNumber               String?
  subscriptionId          String?
  subscriptionStatus      String                      @default("trial")
  trialEndsAt             DateTime?
  subscriptionEndsAt      DateTime?
  createdAt               DateTime                    @default(now())
  updatedAt               DateTime                    @updatedAt
  city                    String?
  region                  String?
  bonusTaxRates           BonusTaxRate[]              @relation("TeamBonusTaxRates")
  budgets                 budgets[]                   @relation("TeamBudgets")
  contractAmendments      contract_amendments[]       @relation("TeamContractAmendments")
  contractClauses         contract_clauses[]          @relation("TeamContractClauses")
  contractFiles           contract_files[]            @relation("TeamContractFiles")
  contractPaymentSchedule contract_payment_schedule[] @relation("TeamPaymentSchedule")
  contracts               contracts[]                 @relation("TeamContracts")
  expenses                expenses[]                  @relation("TeamExpenses")
  injuries                injuries[]                  @relation("TeamInjuries")
  medicalVisits           medical_visits[]            @relation("TeamMedicalVisits")
  performances            PerformanceData[]           @relation("TeamPerformances")
  statistics              player_statistics[]         @relation("TeamStatistics")
  players                 Player[]                    @relation("TeamPlayers")
  taxRates                TaxRate[]                   @relation("TeamTaxRates")
  transfers               transfers[]                 @relation("TeamTransfers")
  users                   UserProfile[]               @relation("TeamUsers")

  @@map("teams")
}

model UserProfile {
  id                      Int               @id @default(autoincrement())
  auth_user_id            String            @unique
  email                   String            @unique
  first_name              String
  last_name               String
  role                    UserRole          @default(SECRETARY)
  theme_preference        String            @default("light")
  language_preference     String            @default("it")
  is_active               Boolean           @default(true)
  last_login              DateTime?
  created_at              DateTime          @default(now())
  updated_at              DateTime          @updatedAt
  teamId                  String?           @map("team_id") @db.Uuid
  uploadedContractFiles   contract_files[]  @relation("ContractFilesUploadedBy")
  contracts               contracts[]
  responsibleForContracts contracts[]       @relation("ContractResponsible")
  injuries                injuries[]
  createdPerformanceData  PerformanceData[] @relation("PerformanceDataCreator")
  createdPlayers          Player[]          @relation("PlayerCreator")
  transfers               transfers[]
  team                    Team?             @relation("TeamUsers", fields: [teamId], references: [id])

  @@map("user_profiles")
}

model Player {
  id                Int                 @id @default(autoincrement())
  firstName         String
  lastName          String
  dateOfBirth       DateTime
  nationality       String
  position          Position
  shirtNumber       Int?                @unique
  height            Float?
  weight            Float?
  preferredFoot     FootType?
  placeOfBirth      String?
  taxCode           String?             @unique
  passportNumber    String?             @unique
  isActive          Boolean             @default(true)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  createdById       Int
  teamId            String?             @map("team_id") @db.Uuid
  contracts         contracts[]
  injuries          injuries[]
  medical_visits    medical_visits[]
  performanceData   PerformanceData[]
  player_statistics player_statistics[]
  createdBy         UserProfile         @relation("PlayerCreator", fields: [createdById], references: [id])
  team              Team?               @relation("TeamPlayers", fields: [teamId], references: [id])
  transfers         transfers[]

  @@map("players")
}

model PerformanceData {
  id                                 Int          @id @default(autoincrement())
  playerId                           Int
  session_date                       DateTime
  session_type                       String?
  duration_minutes                   Int?
  total_distance_m                   Float?
  sprint_distance_m                  Float?
  top_speed_kmh                      Float?
  avg_speed_kmh                      Float?
  player_load                        Float?
  high_intensity_runs                Int?
  max_heart_rate                     Int?
  avg_heart_rate                     Int?
  source_device                      String?
  notes                              String?
  created_at                         DateTime     @default(now())
  updated_at                         DateTime     @updatedAt
  createdById                        Int?
  teamId                             String       @map("team_id") @db.Uuid
  extras                             Json?
  acc_events_per_min_over_2_ms2      Float?
  avg_metabolic_power_wkg            Float?
  dec_events_per_min_over_minus2_ms2 Float?
  distance_15_20_kmh_m               Float?
  distance_20_25_kmh_m               Float?
  distance_acc_over_2_ms2_m          Float?
  distance_acc_over_3_ms2_m          Float?
  distance_dec_over_minus2_ms2_m     Float?
  distance_dec_over_minus3_ms2_m     Float?
  distance_over_15_kmh_m             Float?
  distance_over_20_kmh_m             Float?
  distance_over_20wkg_m              Float?
  distance_over_25_kmh_m             Float?
  distance_over_35wkg_m              Float?
  distance_per_min                   Float?
  drill_name                         String?
  equivalent_distance_m              Float?
  equivalent_distance_pct            Float?
  is_match                           Boolean?
  max_power_5s_wkg                   Float?
  num_acc_over_3_ms2                 Int?
  num_dec_over_minus3_ms2            Int?
  pct_distance_acc_over_2_ms2        Float?
  pct_distance_dec_over_minus2_ms2   Float?
  rvp_index                          Float?
  session_day                        String?
  time_5_10_wkg_min                  Int?
  time_under_5wkg_min                Int?
  training_load                      Float?
  session_name                       String?
  created_by                         UserProfile? @relation("PerformanceDataCreator", fields: [createdById], references: [id])
  player                             Player       @relation(fields: [playerId], references: [id])
  team                               Team         @relation("TeamPerformances", fields: [teamId], references: [id])

  @@map("performance_data")
}

model budgets {
  id           Int            @id @default(autoincrement())
  year         Int
  category     BudgetCategory
  budgetAmount Decimal        @db.Decimal(12, 2)
  spentAmount  Decimal        @default(0) @db.Decimal(12, 2)
  currency     String         @default("EUR")
  description  String?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime
  teamId       String         @map("team_id") @db.Uuid
  team         Team           @relation("TeamBudgets", fields: [teamId], references: [id])
  expenses     expenses[]

  @@unique([year, category])
}

model contract_clauses {
  id          Int        @id @default(autoincrement())
  clauseType  ClauseType
  description String
  amount      Decimal?   @db.Decimal(10, 2)
  currency    String?    @default("EUR")
  conditions  String?
  contractId  Int
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  teamId      String     @map("team_id") @db.Uuid
  percentage  Decimal?   @db.Decimal(5, 2)
  contracts   contracts  @relation(fields: [contractId], references: [id])
  team        Team       @relation("TeamContractClauses", fields: [teamId], references: [id])
}

model contracts {
  id                    Int                         @id @default(autoincrement())
  startDate             DateTime
  endDate               DateTime
  salary                Decimal                     @db.Decimal(12, 2)
  currency              String                      @default("EUR")
  contractType          ContractType
  status                ContractStatus              @default(ACTIVE)
  signedDate            DateTime?
  notes                 String?
  playerId              Int
  createdAt             DateTime                    @default(now())
  updatedAt             DateTime                    @updatedAt
  createdById           Int
  teamId                String                      @map("team_id") @db.Uuid
  agentContact          String?
  buyOption             Boolean?                    @default(false)
  buyPrice              Decimal?                    @db.Decimal(12, 2)
  contractRole          ContractRole?
  depositDate           DateTime?
  loanFromClub          String?
  loanToClub            String?
  obligationToBuy       Boolean?                    @default(false)
  paymentFrequency      PaymentFrequency?
  protocolNumber        String?
  responsibleUserId     Int?
  netSalary             Decimal?                    @db.Decimal(12, 2)
  contractNumber        String?
  fifaId                String?
  leagueRegistrationId  String?
  imageRights           Decimal?                    @db.Decimal(10, 2)
  loyaltyBonus          Decimal?                    @db.Decimal(10, 2)
  signingBonus          Decimal?                    @db.Decimal(10, 2)
  accommodationBonus    Decimal?                    @db.Decimal(8, 2)
  carAllowance          Decimal?                    @db.Decimal(8, 2)
  taxRegime             String?
  taxRate               Decimal?                    @db.Decimal(5, 2)
  socialContributions   Decimal?                    @db.Decimal(10, 2)
  insuranceValue        Decimal?                    @db.Decimal(12, 2)
  insuranceProvider     String?
  renewalConditions     String?
  renewalNoticeMonths   Int?
  jurisdiction          String?
  nonCompeteMonths      Int?
  tutorName             String?
  tutorContact          String?
  languageRequirement   String?
  performanceTargets    Json?
  kpiTargets            Json?
  workPermitStatus      String?
  workPermitExpiry      DateTime?                   @db.Timestamp(6)
  visaType              String?
  relocationPackage     Decimal?                    @db.Decimal(10, 2)
  mediaObligations      String?
  socialMediaClause     String?
  medicalExamDate       DateTime?                   @db.Timestamp(6)
  medicalExamResult     String?
  medicalRestrictions   String?
  lastReviewDate        DateTime?                   @db.Timestamp(6)
  nextReviewDate        DateTime?                   @db.Timestamp(6)
  complianceNotes       String?
  tags                  String[]
  internalNotes         String?
  complianceStatus      ComplianceStatus?           @default(PENDING)
  priority              ContractPriority?           @default(NORMAL)
  medicalInsurance      Boolean?
  autoRenewal           Boolean?
  arbitrationClause     Boolean?
  confidentialityClause Boolean?
  nonCompeteClause      Boolean?
  isMinor               Boolean?
  parentalConsent       Boolean?
  educationClause       Boolean?
  trainingObligation    Boolean?
  workPermitRequired    Boolean?
  visaRequired          Boolean?
  familySupport         Boolean?
  languageLessons       Boolean?
  sponsorshipRights     Boolean?
  dopingConsent         Boolean?
  transferAllowance     Decimal?                    @db.Decimal(8, 2)
  amendments            contract_amendments[]       @relation("ContractAmendmentsForContract")
  contract_clauses      contract_clauses[]
  files                 contract_files[]            @relation("ContractFilesForContract")
  paymentSchedule       contract_payment_schedule[]
  user_profiles         UserProfile                 @relation(fields: [createdById], references: [id])
  players               Player                      @relation(fields: [playerId], references: [id])
  responsible           UserProfile?                @relation("ContractResponsible", fields: [responsibleUserId], references: [id])
  team                  Team                        @relation("TeamContracts", fields: [teamId], references: [id], onUpdate: NoAction, map: "contracts_team_fkey")

  @@unique([teamId, contractNumber], map: "contracts_team_contractNumber_key")
  @@index([teamId, complianceStatus], map: "contracts_team_compliance_idx")
  @@index([teamId, endDate], map: "contracts_team_end_idx")
  @@index([teamId, playerId, status], map: "contracts_team_player_status_idx")
  @@index([teamId, startDate], map: "contracts_team_start_idx")
}

model contract_files {
  id           Int         @id @default(autoincrement())
  contractId   Int
  fileName     String
  mimeType     String
  size         Int
  storagePath  String
  url          String?
  uploadedById Int
  uploadedAt   DateTime    @default(now())
  teamId       String      @map("team_id") @db.Uuid
  contract     contracts   @relation("ContractFilesForContract", fields: [contractId], references: [id])
  team         Team        @relation("TeamContractFiles", fields: [teamId], references: [id])
  uploadedBy   UserProfile @relation("ContractFilesUploadedBy", fields: [uploadedById], references: [id])
}

model contract_amendments {
  id            Int           @id @default(autoincrement())
  contractId    Int
  type          AmendmentType
  signedDate    DateTime?
  effectiveFrom DateTime?
  notes         String?
  createdAt     DateTime      @default(now())
  teamId        String        @map("team_id") @db.Uuid
  contract      contracts     @relation("ContractAmendmentsForContract", fields: [contractId], references: [id])
  team          Team          @relation("TeamContractAmendments", fields: [teamId], references: [id])
}

model expenses {
  id          Int            @id @default(autoincrement())
  amount      Decimal        @db.Decimal(10, 2)
  currency    String         @default("EUR")
  category    BudgetCategory
  description String
  expenseDate DateTime
  budgetId    Int?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime
  teamId      String         @map("team_id") @db.Uuid
  budgets     budgets?       @relation(fields: [budgetId], references: [id])
  team        Team           @relation("TeamExpenses", fields: [teamId], references: [id])
}

model injuries {
  id             Int              @id @default(autoincrement())
  injuryType     InjuryType
  bodyPart       BodyPart
  severity       InjurySeverity
  description    String
  injuryDate     DateTime
  expectedReturn DateTime?
  actualReturn   DateTime?
  status         InjuryStatus     @default(ACTIVE)
  diagnosis      String?
  treatment      String?
  notes          String?
  playerId       Int
  createdAt      DateTime         @default(now())
  updatedAt      DateTime
  createdById    Int
  teamId         String           @map("team_id") @db.Uuid
  user_profiles  UserProfile      @relation(fields: [createdById], references: [id])
  players        Player           @relation(fields: [playerId], references: [id])
  team           Team             @relation("TeamInjuries", fields: [teamId], references: [id])
  medical_visits medical_visits[]
}

model medical_visits {
  id        Int       @id @default(autoincrement())
  visitDate DateTime
  visitType VisitType
  doctor    String
  diagnosis String?
  treatment String?
  notes     String?
  followUp  DateTime?
  playerId  Int
  injuryId  Int?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  teamId    String    @map("team_id") @db.Uuid
  injuries  injuries? @relation(fields: [injuryId], references: [id])
  players   Player    @relation(fields: [playerId], references: [id])
  team      Team      @relation("TeamMedicalVisits", fields: [teamId], references: [id])
}

model player_statistics {
  id            Int      @id @default(autoincrement())
  season        String
  games         Int      @default(0)
  goals         Int      @default(0)
  assists       Int      @default(0)
  yellowCards   Int      @default(0)
  redCards      Int      @default(0)
  minutesPlayed Int      @default(0)
  playerId      Int
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  teamId        String   @map("team_id") @db.Uuid
  players       Player   @relation(fields: [playerId], references: [id])
  team          Team     @relation("TeamStatistics", fields: [teamId], references: [id])

  @@unique([playerId, season])
}

model transfers {
  id            Int            @id @default(autoincrement())
  transferType  TransferType
  transferDate  DateTime?
  fee           Decimal?       @db.Decimal(12, 2)
  currency      String?        @default("EUR")
  status        TransferStatus @default(NEGOTIATING)
  fromClub      String?
  toClub        String?
  agent         String?
  notes         String?
  playerId      Int
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  createdById   Int
  teamId        String         @map("team_id") @db.Uuid
  user_profiles UserProfile    @relation(fields: [createdById], references: [id])
  players       Player         @relation(fields: [playerId], references: [id])
  team          Team           @relation("TeamTransfers", fields: [teamId], references: [id])
}

model contract_payment_schedule {
  id                Int                 @id @default(autoincrement())
  contractId        Int
  installmentNumber Int
  dueDate           DateTime            @db.Timestamp(6)
  amount            Decimal             @db.Decimal(10, 2)
  currency          String              @default("EUR")
  description       String?
  paymentType       PaymentScheduleType
  status            PaymentStatus       @default(PENDING)
  paidDate          DateTime?           @db.Timestamp(6)
  paidAmount        Decimal?            @db.Decimal(10, 2)
  createdAt         DateTime            @default(now()) @db.Timestamp(6)
  updatedAt         DateTime            @default(now()) @updatedAt @db.Timestamp(6)
  teamId            String              @map("team_id") @db.Uuid
  contract          contracts           @relation(fields: [contractId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  team              Team                @relation("TeamPaymentSchedule", fields: [teamId], references: [id], onUpdate: NoAction, map: "contract_payment_schedule_team_fkey")

  @@index([teamId, contractId, status], map: "cps_team_contract_status_idx")
}

model TaxRate {
  id        Int          @id @default(autoincrement())
  year      Int
  type      ContractType
  inps      Decimal      @db.Decimal(5, 2)
  inail     Decimal?     @db.Decimal(5, 2)
  ffc       Decimal      @db.Decimal(5, 2)
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  teamId    String       @map("team_id") @db.Uuid
  team      Team         @relation("TeamTaxRates", fields: [teamId], references: [id])

  @@unique([year, type, teamId])
  @@map("tax_rates")
}

model BonusTaxRate {
  id        Int       @id @default(autoincrement())
  year      Int
  type      BonusType
  taxRate   Decimal   @db.Decimal(5, 2)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  teamId    String    @map("team_id") @db.Uuid
  team      Team      @relation("TeamBonusTaxRates", fields: [teamId], references: [id])

  @@unique([year, type, teamId])
  @@map("bonus_tax_rates")
}

model tax_config {
  id                         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  year                       Int      @unique(map: "uq_tax_config_year")
  contributionrate           Float
  solidarityrate             Float
  detrazionifixed            Float    @default(0)
  detrazionipercentonirpef   Float    @default(0)
  ulterioredetrazionefixed   Float    @default(0)
  ulterioredetrazionepercent Float    @default(0)
  bonusl207fixed             Float    @default(0)
  createdat                  DateTime @default(now()) @db.Timestamptz(6)
}

model tax_irpef_bracket {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  year      Int
  min       Float
  max       Float?
  rate      Float
  createdat DateTime @default(now()) @db.Timestamptz(6)
}

model tax_municipal_additional {
  id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  year         Int
  region       String
  municipality String
  rate         Float
  createdat    DateTime @default(now()) @db.Timestamptz(6)

  @@unique([year, region, municipality], map: "uq_tax_municipal_additional")
}

model tax_municipal_additional_bracket {
  id                            String                        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  rule_id                       String                        @db.Uuid
  min                           Float
  max                           Float?
  rate                          Float
  createdat                     DateTime                      @default(now()) @db.Timestamptz(6)
  tax_municipal_additional_rule tax_municipal_additional_rule @relation(fields: [rule_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([rule_id, min], map: "idx_municipal_bracket_rule")
}

model tax_municipal_additional_rule {
  id                               String                             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  year                             Int
  region                           String
  municipality                     String
  base                             TaxBase                            @default(IMPONIBILE_FISCALE)
  exemption_threshold              Float?
  is_progressive                   Boolean                            @default(false)
  flat_rate                        Float?
  flags                            Json?
  notes                            String?
  is_default                       Boolean                            @default(true)
  createdat                        DateTime                           @default(now()) @db.Timestamptz(6)
  tax_municipal_additional_bracket tax_municipal_additional_bracket[]

  @@unique([year, region, municipality, is_default], map: "uq_municipal_rule")
  @@index([year, region, municipality], map: "idx_municipal_rule_lookup")
}

model tax_regional_additional {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  year      Int
  region    String
  rate      Float
  createdat DateTime @default(now()) @db.Timestamptz(6)

  @@unique([year, region], map: "uq_tax_regional_additional")
}

model tax_regional_additional_bracket {
  id                             String                         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  scheme_id                      String                         @db.Uuid
  min                            Float
  max                            Float?
  rate                           Float
  createdat                      DateTime                       @default(now()) @db.Timestamptz(6)
  tax_regional_additional_scheme tax_regional_additional_scheme @relation(fields: [scheme_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([scheme_id, min], map: "idx_regional_bracket_scheme")
}

model tax_regional_additional_scheme {
  id                              String                            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  year                            Int
  region                          String
  base                            TaxBase                           @default(IMPONIBILE_FISCALE)
  exemption_threshold             Float?
  is_progressive                  Boolean                           @default(true)
  flat_rate                       Float?
  flags                           Json?
  notes                           String?
  is_default                      Boolean                           @default(true)
  createdat                       DateTime                          @default(now()) @db.Timestamptz(6)
  tax_regional_additional_bracket tax_regional_additional_bracket[]

  @@unique([year, region, is_default], map: "uq_regional_scheme")
  @@index([year, region], map: "idx_regional_scheme_lookup")
}









enum BodyPart {
  HEAD
  NECK
  SHOULDER
  ARM
  ELBOW
  WRIST
  HAND
  CHEST
  BACK
  ABDOMEN
  HIP
  THIGH
  KNEE
  SHIN
  CALF
  ANKLE
  FOOT
}

enum BudgetCategory {
  PLAYER_SALARIES
  TRANSFER_FEES
  MEDICAL_COSTS
  INFRASTRUCTURE
  STAFF_SALARIES
  EQUIPMENT
  TRAVEL
  MARKETING
  OTHER
}

enum ClauseType {
  RELEASE_CLAUSE
  RENEWAL_OPTION
  PERFORMANCE_BONUS
  GOAL_BONUS
  APPEARANCE_BONUS
  RELEGATION_CLAUSE
  PROMOTION_BONUS
  INTERNATIONAL_BONUS
  SELL_ON_PERCENTAGE
  BUY_OPTION_FEE
  OBLIGATION_FEE
}

enum ContractStatus {
  DRAFT
  ACTIVE
  EXPIRED
  TERMINATED
  RENEWED
  SUSPENDED
  ON_LOAN
}

enum ContractType {
  PERMANENT
  LOAN
  TRIAL
  YOUTH
  PROFESSIONAL
  AMATEUR
  APPRENTICESHIP
  TRAINING_AGREEMENT
}

enum ContractRole {
  PROFESSIONAL_PLAYER
  AMATEUR_PLAYER
  YOUTH_SERIES
  APPRENTICESHIP
  OTHER
}

enum PaymentFrequency {
  MONTHLY
  BIMONTHLY
  PER_APPEARANCE
  QUARTERLY
  ANNUAL
}

enum AmendmentType {
  RENEWAL
  EXTENSION
  MODIFICATION
  TERMINATION
}

enum FootType {
  LEFT
  RIGHT
  BOTH
}

enum InjurySeverity {
  MINOR
  MODERATE
  MAJOR
  SEVERE
}

enum InjuryStatus {
  ACTIVE
  RECOVERING
  HEALED
  CHRONIC
}

enum InjuryType {
  MUSCLE_STRAIN
  LIGAMENT_TEAR
  BONE_FRACTURE
  CONCUSSION
  BRUISE
  CUT
  SPRAIN
  OVERUSE
  OTHER
}

enum Position {
  GOALKEEPER
  DEFENDER
  MIDFIELDER
  FORWARD
}

enum TransferStatus {
  SCOUTING
  NEGOTIATING
  AGREED
  MEDICAL_PENDING
  COMPLETED
  FAILED
  CANCELLED
}

enum TransferType {
  INCOMING
  OUTGOING
  LOAN_IN
  LOAN_OUT
  FREE_TRANSFER
  EXCHANGE
}

enum UserRole {
  ADMIN
  DIRECTOR_SPORT
  MEDICAL_STAFF
  SECRETARY
  SCOUT
  PREPARATORE_ATLETICO
}

enum VisitType {
  ROUTINE_CHECKUP
  INJURY_ASSESSMENT
  REHABILITATION
  FITNESS_TEST
  SPECIALIST_CONSULTATION
  EMERGENCY
}

enum TaxRegime {
  STANDARD
  BECKHAM_LAW
  IMPATRIATE
  NON_RESIDENT
  SPECIAL_REGIME
}

enum WorkPermitStatus {
  NOT_REQUIRED
  PENDING
  APPROVED
  REJECTED
  EXPIRED
  RENEWAL_PENDING
}

enum MedicalExamResult {
  PENDING
  PASSED
  FAILED
  CONDITIONAL
  RETEST_REQUIRED
}

enum ComplianceStatus {
  PENDING
  APPROVED
  REJECTED
  NEEDS_REVIEW
  EXPIRED
}

enum ContractPriority {
  LOW
  NORMAL
  HIGH
  CRITICAL
}

enum BonusType {
  IMAGE_RIGHTS
  LOYALTY_BONUS
  SIGNING_BONUS
  ACCOMMODATION_BONUS
  CAR_ALLOWANCE
  TRANSFER_ALLOWANCE
}

enum PaymentScheduleType {
  SALARY
  BONUS
  SIGNING_BONUS
  LOYALTY_BONUS
  IMAGE_RIGHTS
  TRANSFER_FEE
  AGENT_COMMISSION
  OTHER
}

enum PaymentStatus {
  PENDING
  PAID
  OVERDUE
  PARTIAL
  CANCELLED
}

enum TaxBase {
  IMPONIBILE_FISCALE
  LORDO
  NETTO
}

