// Test finale con database
const axios = require('axios');

async function testFinaleDatabase() {
  try {
    console.log('üß™ TEST FINALE CON DATABASE');
    console.log('============================');

    const baseURL = 'http://localhost:3001';
    
    // Test: 33.500‚Ç¨ netto ‚Üí lordo
    console.log('\nüìä TEST: 33.500‚Ç¨ netto ‚Üí lordo (con scaglioni DB)');
    console.log('--------------------------------------------------');
    
    const response = await axios.post(`${baseURL}/api/taxes/gross-from-net`, {
      netSalary: 33500,
      taxRates: {
        irpefBrackets: [
          { from: 0, to: 15000, rate: 0.23 },
          { from: 15000, to: 28000, rate: 0.25 },
          { from: 28000, to: 50000, rate: 0.35 },
          { from: 50000, to: Infinity, rate: 0.43 }
        ]
      },
      opts: {
        year: 2025,
        region: 'Marche',
        municipality: 'Pesaro'
      }
    });

    if (response.data.success) {
      const data = response.data.data;
      
      console.log(`‚úÖ Netto target: ‚Ç¨33500.00`);
      console.log(`‚úÖ Lordo calcolato: ‚Ç¨${data.grossSalary?.toFixed(2) || 'N/A'}`);
      console.log(`‚úÖ Netto verificato: ‚Ç¨${data.netSalary?.toFixed(2) || 'N/A'}`);
      
      console.log('\nüìä CONTRIBUTI LAVORATORE:');
      console.log(`‚úÖ INPS Worker: ‚Ç¨${data.inpsWorker?.toFixed(2) || 'N/A'}`);
      console.log(`‚úÖ FFC Worker: ‚Ç¨${data.ffcWorker?.toFixed(2) || 'N/A'}`);
      console.log(`‚úÖ Solidariet√† Worker: ‚Ç¨${data.solidarityWorker?.toFixed(2) || 'N/A'}`);
      
      console.log('\nüìä CONTRIBUTI DATORE:');
      console.log(`‚úÖ INPS Employer: ‚Ç¨${data.inpsEmployer?.toFixed(2) || 'N/A'}`);
      console.log(`‚úÖ INAIL Employer: ‚Ç¨${data.inailEmployer?.toFixed(2) || 'N/A'}`);
      console.log(`‚úÖ FFC Employer: ‚Ç¨${data.ffcEmployer?.toFixed(2) || 'N/A'} ‚Üê DEVE ESSERE > 0`);
      
      console.log('\nüìä TASSE E ADDIZIONALI:');
      console.log(`‚úÖ Imponibile fiscale: ‚Ç¨${data.taxableIncome?.toFixed(2) || 'N/A'}`);
      console.log(`‚úÖ IRPEF (scaglioni DB): ‚Ç¨${data.irpef?.toFixed(2) || 'N/A'}`);
      console.log(`‚úÖ Addizionali (Marche+Pesaro): ‚Ç¨${data.addizionali?.toFixed(2) || 'N/A'}`);
      
      console.log(`\nüìä Costo aziendale: ‚Ç¨${data.companyCost?.toFixed(2) || 'N/A'}`);
      
      // Verifica precisione
      const diff = Math.abs(data.netSalary - 33500);
      if (diff < 1) {
        console.log(`üéØ Precisione: ¬±‚Ç¨${diff.toFixed(2)} (OTTIMA)`);
      } else {
        console.log(`‚ö†Ô∏è Precisione: ¬±‚Ç¨${diff.toFixed(2)} (da migliorare)`);
      }
      
      // Verifica FFC Employer
      if (data.ffcEmployer > 0) {
        console.log(`üéâ SUCCESS: FFC Employer = ‚Ç¨${data.ffcEmployer.toFixed(2)} (NON PI√ô ZERO!)`);
      } else {
        console.log(`‚ùå PROBLEMA: FFC Employer ancora a zero`);
      }
      
      console.log('\nüéØ CONFRONTO SCAGLIONI:');
      console.log('======================');
      console.log('üìä Scaglioni DATABASE (2025):');
      console.log('   - 0-28.000‚Ç¨: 23%');
      console.log('   - 28.000-35.000‚Ç¨: 33%');
      console.log('   - 35.000‚Ç¨+: 43%');
      console.log('');
      console.log('üìä Scaglioni HARDCODED (fallback):');
      console.log('   - 0-15.000‚Ç¨: 23%');
      console.log('   - 15.000-28.000‚Ç¨: 25%');
      console.log('   - 28.000-50.000‚Ç¨: 35%');
      console.log('   - 50.000‚Ç¨+: 43%');
      console.log('');
      console.log('‚úÖ Il sistema ora usa gli scaglioni del DATABASE!');
      
    } else {
      console.error('‚ùå Errore API:', response.data.error);
    }

  } catch (error) {
    console.error('‚ùå Errore test:', error.message);
    if (error.response) {
      console.error('‚ùå Response status:', error.response.status);
      console.error('‚ùå Response data:', error.response.data);
    }
  }
}

testFinaleDatabase();

